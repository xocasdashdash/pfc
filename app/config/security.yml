security:
    encoders:
        Symfony\Component\Security\Core\User\User: plaintext

    role_hierarchy:
        ROLE_STAFF_PAS: ROLE_STUDENT
        ROLE_STAFF_PDI: ROLE_STUDENT
        ROLE_ADMIN: [ROLE_STAFF_PAS,ROLE_STAFF_PDI]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    firewalls:
        dev:
            pattern:  ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern:  ^/demo/secured/login$
            security: false
        
        main:
            pattern:    ^/
            logout:     true
            anonymous:  true
            form_login:
                post_only: false                
            fp_openid:
                login_path: /login
                create_user_if_not_exists: true # so createUserFromIdentity method will be called
                provider: openid_user_manager # cf below
                # previously we used 'contact/email' field. So we have to request it!
                # Please note that all OpenID providers may not be able to provide all fields.
                # check the desired provider documentation
                required_attributes:
                    - contact/email     
                    - namePerson/first
                    - namePerson/prefix

    providers:
        # the order is important here
        openid_user_manager:
            id: UAH.GestorActividades.openid_user_manager # the name of the service
        # keep your database provider below! it may look like this:
        database:
            entity: { class: UAHGestorActividadesBundle:User, property: username }
        in_memory:
            memory:
                users:
                    user:  { password: userpass, roles: [ 'ROLE_USER' ] }
                    admin: { password: adminpass, roles: [ 'ROLE_ADMIN' ] }
    
    access_control:
        - { path: ^/login_openid$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/secured_area, role: IS_AUTHENTICATED_OPENID }    

    access_control:
        - { path: ^/demo/secured/hello/admin/, roles: ROLE_ADMIN }
        #- { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }
